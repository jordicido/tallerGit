{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Entenem Git pels seus conceptes, no per les comandes","text":"<p>Benvinguts/des al taller de Git pels alumnes d'ASIX de la Setmana Cultural de l'IES Jaume II el Just. En este taller intentem explicar els conceptes b\u00e0sics de Git i GitHub, aix\u00ed com la seva import\u00e0ncia en el m\u00f3n inform\u00e0tic. No ens centrarem tant en les comandes, sin\u00f3 en entendre com funciona Git i per qu\u00e8 \u00e9s \u00fatil.</p>"},{"location":"#part-0-installacio-i-configuracio-de-git","title":"Part 0: Instal\u00b7laci\u00f3 i configuraci\u00f3 de Git","text":""},{"location":"#part-1-repositoris-locals","title":"Part 1: Repositoris locals","text":""},{"location":"#part-2-crear-branques-i-fusionar-les","title":"Part 2: Crear branques i fusionar-les","text":""},{"location":"part0/","title":"Part 0: Instal\u00b7laci\u00f3 i configuraci\u00f3 de Git","text":""},{"location":"part0/#que-es-git","title":"Qu\u00e8 \u00e9s Git?","text":"<p>Git \u00e9s un sistema de control de versions distribu\u00eft. Aix\u00f2 vol dir que ens permet portar un registre de tots els canvis que fem en els nostres projectes, aix\u00ed com treballar en equip de manera eficient. Git ens ajuda a gestionar el codi font i a col\u00b7laborar amb altres persones sense perdre la feina feta.</p>"},{"location":"part0/#installar-git","title":"Instal\u00b7lar Git","text":"<p>Per instal\u00b7lar Git, podeu seguir les instruccions de la p\u00e0gina oficial de Git. Un cop instal\u00b7lat, podeu comprovar que tot funciona correctament executant la comanda seg\u00fcent en el terminal:</p> <pre><code>git --version\n</code></pre> <p>Si tot ha anat b\u00e9, haureu de veure la versi\u00f3 de Git que teniu instal\u00b7lada.</p>"},{"location":"part0/#configurar-git","title":"Configurar Git","text":"<p>Abans de comen\u00e7ar a utilitzar Git, \u00e9s important configurar el vostre nom d'usuari i correu electr\u00f2nic. Aix\u00f2 \u00e9s necessari perqu\u00e8 Git pugui identificar qui ha fet cada canvi. Podeu fer-ho executant les seg\u00fcents comandes:</p> <pre><code>git config --global user.name \"El vostre nom\"\ngit config --global user.email \"el vostre correu electr\u00f2nic\"\n</code></pre> <p>Aix\u00f2 nom\u00e9s cal fer-ho una vegada, i despr\u00e9s Git recordar\u00e0 la vostra configuraci\u00f3.</p>"},{"location":"part1/","title":"Part 1: Repositoris locals","text":""},{"location":"part1/#que-es-un-repositori-local","title":"Qu\u00e8 \u00e9s un repositori local?","text":"<p>Un repositori local \u00e9s una carpeta al vostre ordinador on Git emmagatzema tots els fitxers i la informaci\u00f3 sobre el vostre projecte. Cada repositori cont\u00e9 un historial complet de tots els canvis que heu fet, aix\u00ed com les branques i etiquetes associades al projecte.</p> <p>\u00c9s important entendre l'estructura d'un repositori local per poder treballar amb Git de manera eficient. Un repositori local cont\u00e9 diversos fitxers i carpetes que ajuden a gestionar el projecte. A continuaci\u00f3, es mostra una imatge de l'estructura t\u00edpica d'un repositori local:</p> <p></p> <p>El \"working directory\" \u00e9s la carpeta on treballeu actualment. Cont\u00e9 els fitxers del vostre projecte i \u00e9s on feu els canvis. El \"staging area\" \u00e9s una zona interm\u00e8dia on podeu preparar els fitxers abans de fer un commit. Finalment, el \"repository\" \u00e9s on Git emmagatzema l'historial complet del vostre projecte.</p>"},{"location":"part1/#crear-un-repositori-local","title":"Crear un repositori local","text":"<p>Per crear un repositori local, podeu utilitzar la comanda <code>git init</code>. Aquesta comanda crea una nova carpeta oculta anomenada <code>.git</code> dins del vostre directori de treball, que \u00e9s on Git emmagatzema tota la informaci\u00f3 sobre el vostre projecte.</p> <p>Per exemple, anem a crear una carpeta anomenada <code>provaGit</code>, i despr\u00e9s podeu crear un repositori local executant la seg\u00fcent comanda:</p> <pre><code>cd provaGit\ngit init\n</code></pre> <p>Aix\u00f2 crear\u00e0 un nou repositori local dins de la carpeta <code>provaGit</code>. Ara podeu comen\u00e7ar a afegir fitxers i fer canvis al vostre projecte.</p>"},{"location":"part1/#afegir-fitxers-al-repositori","title":"Afegir fitxers al repositori","text":"<p>Per seguir amb la prova anem a crear un fitxer <code>README.md</code> dins de la carpeta <code>provaGit</code> i afegir-hi una breu descripci\u00f3 del projecte. Podeu fer-ho amb qualsevol editor de text, com ara Visual Studio Code.</p> <p>Un cop tingueu el fitxer creat, podeu afegir-lo a l'staging area executant la comanda seg\u00fcent:</p> <pre><code>git add README.md\n</code></pre> <p></p> <p>Aquesta comanda indica a Git que voleu afegir el fitxer <code>README.md</code> a l'staging area, preparant-lo per al seg\u00fcent commit. Si voleu afegir tots els fitxers del directori, podeu utilitzar la comanda <code>git add .</code>, que afegeix tots els fitxers nous i modificats.</p> <p>Ja nom\u00e9s queda fer el commit per guardar els canvis. Podeu fer-ho executant la seg\u00fcent comanda:</p> <pre><code>git commit -m \"Afegit README.md\"\n</code></pre> <p></p>"},{"location":"part1/#consultar-informacio-del-repositori","title":"Consultar informaci\u00f3 del repositori","text":"<p>Per consultar informaci\u00f3 sobre el vostre repositori, podeu utilitzar la comanda <code>git status</code>. Aquesta comanda us mostrar\u00e0 l'estat actual del vostre repositori, incloent els fitxers que heu afegit a l'staging area i els fitxers que han estat modificats per\u00f2 no afegits.</p> <pre><code>git status\n</code></pre> <p>Si volem veure l'historial de commits, podeu utilitzar la comanda <code>git log</code>. Aquesta comanda us mostrar\u00e0 una llista de tots els commits que heu fet al vostre repositori, juntament amb informaci\u00f3 com l'autor, la data i el missatge del commit.</p> <pre><code>git log\n</code></pre> <p>\u00c9s important que entenguem quina informaci\u00f3 ens proporciona el log, que \u00e9s molta, per entendre com funciona Git.</p> <p>Vos hauria d'haver eixit una informaci\u00f3 pareguda a esta:</p> <pre><code>commit a7a541abf1b61c8c155bfadb5c3ca9cc7d0bcfd6 (HEAD -&gt; main)\nAuthor: jordicido &lt;jordi.cidoncha4@gmail.com&gt;\nDate:   Fri Apr 11 09:37:37 2025 +0200\n\n    Afegit README.md\n</code></pre> <p>En esta eixida podem observar:</p> <ul> <li>El commit \u00e9s identificat per un hash (a7a541abf1b61c8c155bfadb5c3ca9cc7d0bcfd6), que \u00e9s un identificador \u00fanic per a cada commit.</li> <li>El commit actual \u00e9s el HEAD, que indica la branca actual en la qual estem treballant (en este cas, <code>main</code>).</li> <li>L'autor del commit \u00e9s <code>jordicido</code>, que \u00e9s el nom d'usuari configurat anteriorment.</li> <li>La data i hora del commit.</li> <li>El missatge del commit \u00e9s \"Afegit README.md\", que \u00e9s el missatge que hem afegit quan hem fet el commit.</li> </ul> <p>Quan comencem a fer diversos commits, el log comen\u00e7ar\u00e0 a fer-se llarg i dif\u00edcil de llegir. Per aix\u00f2, podem utilitzar la comanda <code>git log --oneline</code>, que ens mostrar\u00e0 una versi\u00f3 m\u00e9s compacta de l'historial de commits, mostrant nom\u00e9s el hash i el missatge del commit.</p> <pre><code>git log --oneline\n</code></pre> <p>En este cas podem vore una llista de commits m\u00e9s compacta, amb nom\u00e9s el hash i el missatge del commit. Aix\u00f2 \u00e9s \u00fatil per obtenir una visi\u00f3 r\u00e0pida de l'historial del vostre repositori.</p> <pre><code>a7a541a (HEAD -&gt; main) Afegit README.md\n</code></pre>"},{"location":"part1/#afegir-fitxers-i-canvis-al-repositori","title":"Afegir fitxers i canvis al repositori","text":"<p>Ara ens interessa realitzar diversos canvis per for\u00e7ar un historial de canvis m\u00e9s llarg. Afegiu fitxers al projecte, modifiqueu-los i torneu a fer <code>git add</code> i <code>git commit</code> per afegir els canvis al repositori. Feu 3 o 4 commits m\u00e9s pel vostre compte, i despr\u00e9s podeu continuar amb la seg\u00fcent part del taller.</p>"},{"location":"part2/","title":"Part 2: Crear branques i fusionar-les","text":""},{"location":"part2/#que-es-una-branca","title":"Qu\u00e8 \u00e9s una branca?","text":"<p>Per entendre qu\u00e8 \u00e9s una branca, pensem en un arbre. La branca principal \u00e9s la branca <code>master</code> o <code>main</code>, i les altres branques s\u00f3n com les branques secund\u00e0ries que surten d'aquesta. Cada branca pot tenir el seu propi conjunt de canvis, i podem fusionar-les quan sigui necessari.</p> <p>Anem a afegir un par\u00e0metre m\u00e9s a la comanda <code>git log</code> per veure les branques de cada commit. Executa la seg\u00fcent comanda:</p> <pre><code>git log --oneline --graph --decorate\n</code></pre> <p>Vorem que l'eixida de la comanda varia un poc respecte a la que hem vist abans.</p> <pre><code>* 8a72d0a (HEAD -&gt; main) m\u00e9s canvis al README\n* 8267bc4 nous canvis al README\n* 2d094c9 canvis al README\n* a7a541a Afegit README.md\n</code></pre> <p>Anem a aprofundir en este esquema, i ho pintarem diferent per entendre el concepte de commit i de branca. Este diagrama \u00e9s el que a mi em va fer canviar totalment la concepci\u00f3 de Git i em va fer clic per entendre com funciona.</p> <p></p> <p>En este diagrama podem observar que cada commit \u00e9s un punt en el temps, i cada branca \u00e9s una l\u00ednia que representa el desenvolupament del projecte. Es important entendre que les branques no s\u00f3n m\u00e9s que punters que apunten a un commit concret en el temps. Aix\u00f2 vol dir que cada vegada que fem un commit, estem creant un nou punt en el temps.</p> <p>Eixos punts en el temps ens permetran tornar enrere en el temps i veure com era el projecte en un moment concret. Aix\u00f2 \u00e9s molt \u00fatil si volem desfer canvis.</p>"},{"location":"part2/#crear-una-nova-branca","title":"Crear una nova branca","text":"<p>Per crear una nova branca, podem utilitzar la comanda <code>git branch</code>. Aquesta comanda ens permet crear una nova branca a partir de la branca actual. Per exemple, si volem crear una nova branca anomenada <code>nova-branca</code>, podem executar la seg\u00fcent comanda:</p> <pre><code>git branch nova-branca\n</code></pre> <p>Amb esta comanda el que fem \u00e9s crear un nou punter que apunta al commit actual.</p> <p></p> <p>Per\u00f2 fixeu-vos en <code>HEAD</code>, qu\u00e8 \u00e9s aix\u00f2? <code>HEAD</code> \u00e9s un punter que indica la branca en la que ens troben actualment. En este cas, <code>HEAD</code> apunta a la branca <code>main</code>, que \u00e9s la branca principal del nostre repositori. Si volem canviar a la nova branca que acabem de crear, podem utilitzar la comanda <code>git checkout</code>:</p> <pre><code>git checkout nova-branca\n</code></pre> <p></p>"}]}