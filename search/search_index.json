{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Entenem Git pels seus conceptes, no per les comandes","text":"<p>Benvinguts/des al taller de Git pels alumnes d'ASIX de la Setmana Cultural de l'IES Jaume II el Just. En este taller intentem explicar els conceptes b\u00e0sics de Git i GitHub, aix\u00ed com la seva import\u00e0ncia en el m\u00f3n inform\u00e0tic. No ens centrarem tant en les comandes, sin\u00f3 en entendre com funciona Git i per qu\u00e8 \u00e9s \u00fatil.</p>"},{"location":"#part-0-installacio-i-configuracio-de-git","title":"Part 0: Instal\u00b7laci\u00f3 i configuraci\u00f3 de Git","text":""},{"location":"#part-1-repositoris-locals","title":"Part 1: Repositoris locals","text":""},{"location":"#part-2-crear-branques-i-fusionar-les","title":"Part 2: Crear branques i fusionar-les","text":""},{"location":"#part-3-repositoris-remots","title":"Part 3: Repositoris remots","text":""},{"location":"#part-4-collaboracio-amb-github","title":"Part 4: Col\u00b7laboraci\u00f3 amb GitHub","text":""},{"location":"#part-5-desfer-canvis","title":"Part 5: Desfer canvis","text":""},{"location":"#part-6-modificar-lhistorial-de-commits","title":"Part 6: Modificar l'historial de commits","text":""},{"location":"part0/","title":"Part 0: Instal\u00b7laci\u00f3 i configuraci\u00f3 de Git","text":""},{"location":"part0/#que-es-git","title":"Qu\u00e8 \u00e9s Git?","text":"<p>Git \u00e9s un sistema de control de versions distribu\u00eft. Aix\u00f2 vol dir que ens permet portar un registre de tots els canvis que fem en els nostres projectes, aix\u00ed com treballar en equip de manera eficient. Git ens ajuda a gestionar el codi font i a col\u00b7laborar amb altres persones sense perdre la feina feta.</p>"},{"location":"part0/#installar-git","title":"Instal\u00b7lar Git","text":"<p>Per instal\u00b7lar Git, podeu seguir les instruccions de la p\u00e0gina oficial de Git. Un cop instal\u00b7lat, podeu comprovar que tot funciona correctament executant la comanda seg\u00fcent en el terminal:</p> <pre><code>git --version\n</code></pre> <p>Si tot ha anat b\u00e9, haureu de veure la versi\u00f3 de Git que teniu instal\u00b7lada.</p>"},{"location":"part0/#configurar-git","title":"Configurar Git","text":"<p>Abans de comen\u00e7ar a utilitzar Git, \u00e9s important configurar el vostre nom d'usuari i correu electr\u00f2nic. Aix\u00f2 \u00e9s necessari perqu\u00e8 Git pugui identificar qui ha fet cada canvi. Podeu fer-ho executant les seg\u00fcents comandes:</p> <pre><code>git config --global user.name \"El vostre nom\"\ngit config --global user.email \"el vostre correu electr\u00f2nic\"\n</code></pre> <p>Aix\u00f2 nom\u00e9s cal fer-ho una vegada, i despr\u00e9s Git recordar\u00e0 la vostra configuraci\u00f3.</p>"},{"location":"part1/","title":"Part 1: Repositoris locals","text":""},{"location":"part1/#que-es-un-repositori-local","title":"Qu\u00e8 \u00e9s un repositori local?","text":"<p>Un repositori local \u00e9s una carpeta al vostre ordinador on Git emmagatzema tots els fitxers i la informaci\u00f3 sobre el vostre projecte. Cada repositori cont\u00e9 un historial complet de tots els canvis que heu fet, aix\u00ed com les branques i etiquetes associades al projecte.</p> <p>\u00c9s important entendre l'estructura d'un repositori local per poder treballar amb Git de manera eficient. Un repositori local cont\u00e9 diversos fitxers i carpetes que ajuden a gestionar el projecte. A continuaci\u00f3, es mostra una imatge de l'estructura t\u00edpica d'un repositori local:</p> <p></p> <p>El \"working directory\" \u00e9s la carpeta on treballeu actualment. Cont\u00e9 els fitxers del vostre projecte i \u00e9s on feu els canvis. El \"staging area\" \u00e9s una zona interm\u00e8dia on podeu preparar els fitxers abans de fer un commit. Finalment, el \"repository\" \u00e9s on Git emmagatzema l'historial complet del vostre projecte.</p>"},{"location":"part1/#crear-un-repositori-local","title":"Crear un repositori local","text":"<p>Per crear un repositori local, podeu utilitzar la comanda <code>git init</code>. Aquesta comanda crea una nova carpeta oculta anomenada <code>.git</code> dins del vostre directori de treball, que \u00e9s on Git emmagatzema tota la informaci\u00f3 sobre el vostre projecte.</p> <p>Per exemple, anem a crear una carpeta anomenada <code>provaGit</code>, i despr\u00e9s podeu crear un repositori local executant la seg\u00fcent comanda:</p> <pre><code>cd provaGit\ngit init\n</code></pre> <p>Aix\u00f2 crear\u00e0 un nou repositori local dins de la carpeta <code>provaGit</code>. Ara podeu comen\u00e7ar a afegir fitxers i fer canvis al vostre projecte.</p>"},{"location":"part1/#afegir-fitxers-al-repositori","title":"Afegir fitxers al repositori","text":"<p>Per seguir amb la prova anem a crear un fitxer <code>README.md</code> dins de la carpeta <code>provaGit</code> i afegir-hi una breu descripci\u00f3 del projecte. Podeu fer-ho amb qualsevol editor de text, com ara Visual Studio Code.</p> <p>Un cop tingueu el fitxer creat, podeu afegir-lo a l'staging area executant la comanda seg\u00fcent:</p> <pre><code>git add README.md\n</code></pre> <p></p> <p>Aquesta comanda indica a Git que voleu afegir el fitxer <code>README.md</code> a l'staging area, preparant-lo per al seg\u00fcent commit. Si voleu afegir tots els fitxers del directori, podeu utilitzar la comanda <code>git add .</code>, que afegeix tots els fitxers nous i modificats.</p> <p>Ja nom\u00e9s queda fer el commit per guardar els canvis. Podeu fer-ho executant la seg\u00fcent comanda:</p> <pre><code>git commit -m \"Afegit README.md\"\n</code></pre> <p></p>"},{"location":"part1/#consultar-informacio-del-repositori","title":"Consultar informaci\u00f3 del repositori","text":"<p>Per consultar informaci\u00f3 sobre el vostre repositori, podeu utilitzar la comanda <code>git status</code>. Aquesta comanda us mostrar\u00e0 l'estat actual del vostre repositori, incloent els fitxers que heu afegit a l'staging area i els fitxers que han estat modificats per\u00f2 no afegits.</p> <pre><code>git status\n</code></pre> <p>Si volem veure l'historial de commits, podeu utilitzar la comanda <code>git log</code>. Aquesta comanda us mostrar\u00e0 una llista de tots els commits que heu fet al vostre repositori, juntament amb informaci\u00f3 com l'autor, la data i el missatge del commit.</p> <pre><code>git log\n</code></pre> <p>\u00c9s important que entenguem quina informaci\u00f3 ens proporciona el log, que \u00e9s molta, per entendre com funciona Git.</p> <p>Vos hauria d'haver eixit una informaci\u00f3 pareguda a esta:</p> <pre><code>commit a7a541abf1b61c8c155bfadb5c3ca9cc7d0bcfd6 (HEAD -&gt; main)\nAuthor: jordicido &lt;jordi.cidoncha4@gmail.com&gt;\nDate:   Fri Apr 11 09:37:37 2025 +0200\n\n    Afegit README.md\n</code></pre> <p>En esta eixida podem observar:</p> <ul> <li>El commit \u00e9s identificat per un hash (a7a541abf1b61c8c155bfadb5c3ca9cc7d0bcfd6), que \u00e9s un identificador \u00fanic per a cada commit.</li> <li>El commit actual \u00e9s el HEAD, que indica la branca actual en la qual estem treballant (en este cas, <code>main</code>).</li> <li>L'autor del commit \u00e9s <code>jordicido</code>, que \u00e9s el nom d'usuari configurat anteriorment.</li> <li>La data i hora del commit.</li> <li>El missatge del commit \u00e9s \"Afegit README.md\", que \u00e9s el missatge que hem afegit quan hem fet el commit.</li> </ul> <p>Quan comencem a fer diversos commits, el log comen\u00e7ar\u00e0 a fer-se llarg i dif\u00edcil de llegir. Per aix\u00f2, podem utilitzar la comanda <code>git log --oneline</code>, que ens mostrar\u00e0 una versi\u00f3 m\u00e9s compacta de l'historial de commits, mostrant nom\u00e9s el hash i el missatge del commit.</p> <pre><code>git log --oneline\n</code></pre> <p>En este cas podem vore una llista de commits m\u00e9s compacta, amb nom\u00e9s el hash i el missatge del commit. Aix\u00f2 \u00e9s \u00fatil per obtenir una visi\u00f3 r\u00e0pida de l'historial del vostre repositori.</p> <pre><code>a7a541a (HEAD -&gt; main) Afegit README.md\n</code></pre>"},{"location":"part1/#configurar-arxius-a-ignorar","title":"Configurar arxius a ignorar","text":"<p>Imaginem que al nostre projecte tenim un fitxer anomenat <code>config.txt</code> que cont\u00e9 informaci\u00f3 secreta, com claus o contrasenyes, o incl\u00fas informaci\u00f3 personal. No volem que aquest fitxer sigui afegit al repositori, ja que podria ser exposat a altres persones. Per evitar-ho, podem crear un fitxer anomenat <code>.gitignore</code> dins del nostre repositori i afegir-hi el nom del fitxer o carpeta que volem ignorar.</p> <p>Per exemple, podeu crear un fitxer <code>.gitignore</code> dins de la carpeta <code>provaGit</code> i afegir-hi el seg\u00fcent contingut:</p> <pre><code>config.txt\n</code></pre> <p>Aix\u00f2 indicar\u00e0 a Git que ignori el fitxer <code>config.txt</code> i no l'afegisca al repositori. Podeu afegir altres fitxers o carpetes al fitxer <code>.gitignore</code> separant-los amb una nova l\u00ednia.</p>"},{"location":"part1/#afegir-fitxers-i-canvis-al-repositori","title":"Afegir fitxers i canvis al repositori","text":"<p>Ara ens interessa realitzar diversos canvis per for\u00e7ar un historial de canvis m\u00e9s llarg. Afegiu fitxers al projecte, modifiqueu-los i torneu a fer <code>git add</code> i <code>git commit</code> per afegir els canvis al repositori. Feu 3 o 4 commits m\u00e9s pel vostre compte, i despr\u00e9s podeu continuar amb la seg\u00fcent part del taller.</p>"},{"location":"part2/","title":"Part 2: Crear branques i fusionar-les","text":""},{"location":"part2/#que-es-una-branca","title":"Qu\u00e8 \u00e9s una branca?","text":"<p>Per entendre qu\u00e8 \u00e9s una branca, pensem en un arbre. La branca principal \u00e9s la branca <code>master</code> o <code>main</code>, i les altres branques s\u00f3n com les branques secund\u00e0ries que surten d'aquesta. Cada branca pot tenir el seu propi conjunt de canvis, i podem fusionar-les quan sigui necessari.</p> <p>Anem a afegir un par\u00e0metre m\u00e9s a la comanda <code>git log</code> per veure les branques de cada commit. Executa la seg\u00fcent comanda:</p> <pre><code>git log --oneline --graph --decorate\n</code></pre> <p>Vorem que l'eixida de la comanda varia un poc respecte a la que hem vist abans.</p> <pre><code>* 8a72d0a (HEAD -&gt; main) m\u00e9s canvis al README\n* 8267bc4 nous canvis al README\n* 2d094c9 canvis al README\n* a7a541a Afegit README.md\n</code></pre> <p>Anem a aprofundir en este esquema, i ho pintarem diferent per entendre el concepte de commit i de branca. Este diagrama \u00e9s el que a mi em va fer canviar totalment la concepci\u00f3 de Git i em va fer clic per entendre com funciona.</p> <p></p> <p>En este diagrama podem observar que cada commit \u00e9s un punt en el temps, i cada branca \u00e9s una l\u00ednia que representa el desenvolupament del projecte. Es important entendre que les branques no s\u00f3n m\u00e9s que punters que apunten a un commit concret en el temps. Aix\u00f2 vol dir que cada vegada que fem un commit, estem creant un nou punt en el temps.</p> <p>Eixos punts en el temps ens permetran tornar enrere en el temps i veure com era el projecte en un moment concret. Aix\u00f2 \u00e9s molt \u00fatil si volem desfer canvis.</p>"},{"location":"part2/#crear-una-nova-branca","title":"Crear una nova branca","text":"<p>Per crear una nova branca, podem utilitzar la comanda <code>git branch</code>. Aquesta comanda ens permet crear una nova branca a partir de la branca actual. Per exemple, si volem crear una nova branca anomenada <code>nova-branca</code>, podem executar la seg\u00fcent comanda:</p> <pre><code>git branch nova-branca\n</code></pre> <p>Amb esta comanda el que fem \u00e9s crear un nou punter que apunta al commit actual.</p> <p></p> <p>Per\u00f2 fixeu-vos en <code>HEAD</code>, qu\u00e8 \u00e9s aix\u00f2? <code>HEAD</code> \u00e9s un punter que indica la branca en la que ens troben actualment. En este cas, <code>HEAD</code> apunta a la branca <code>main</code>, que \u00e9s la branca principal del nostre repositori. Si volem canviar a la nova branca que acabem de crear, podem utilitzar la comanda <code>git checkout</code>:</p> <pre><code>git checkout nova-branca\n</code></pre> <p></p>"},{"location":"part2/#diversificacio-de-camins-en-lhistorial","title":"Diversificaci\u00f3 de camins en l'historial","text":"<p>En l'estat anterior, tenim les dues branques apuntant al mateix commit, per\u00f2 ara la m\u00e0gia de Git comen\u00e7a a passar. Si fem un commit en la nova branca, el commit es guardar\u00e0 en la nova branca i no afectar\u00e0 la branca <code>main</code>. Aix\u00f2 \u00e9s el que ens permet treballar en diferents funcionalitats alhora sense interferir en el treball dels altres. Des de la branca <code>nova-branca</code> fes canvis en el projecte i commiteja'ls.</p> <pre><code>git commit -m \"Canvis en la nova branca\"\n</code></pre> <p>Feu un git log amb els par\u00e0metres anteriors per veure com queda l'historial. Ara veureu que la branca <code>nova-branca</code> t\u00e9 un commit nou que no est\u00e0 present en la branca <code>main</code>.</p> <pre><code>* 2e4ef06 (HEAD -&gt; nova_branca) Canvis en la nova branca\n* 8a72d0a (main) m\u00e9s canvis al README\n* 8267bc4 nous canvis al README\n* 2d094c9 canvis al README\n* a7a541a Afegit README.md\n</code></pre> <p>Si analitzem el log i el tranformem en diagrama tindriem algo aix\u00ed:</p> <p></p> <p>Ara tenim dues branques que divergeixen, i cada una t\u00e9 el seu propi conjunt de commits. Aix\u00f2 \u00e9s el que ens permet treballar en paral\u00b7lel sense interferir en el treball dels altres.</p>"},{"location":"part2/#fusionar-branques","title":"Fusionar branques","text":"<p>Ara que tenim dues branques, \u00e9s hora de fusionar-les. La fusi\u00f3 de branques \u00e9s el proc\u00e9s d'unir dues branques en una sola. Aix\u00f2 \u00e9s \u00fatil quan hem acabat de treballar en una funcionalitat i volem integrar-la a la branca principal.</p> <p>Per fusionar dues branques, primer hem de canviar a la branca en la qual volem fusionar els canvis. En este cas, volem fusionar els canvis de la branca <code>nova-branca</code> a la branca <code>main</code>. Per fer-ho, primer canviem a la branca <code>main</code> amb la comanda seg\u00fcent:</p> <pre><code>git checkout main\n</code></pre> <p>Ara, el nostre <code>HEAD</code> apunta a la branca <code>main</code>.</p> <p></p> <p>Ara podem fusionar els canvis de la branca <code>nova-branca</code> a la branca <code>main</code> amb la comanda seg\u00fcent:</p> <pre><code>git merge nova-branca\n</code></pre> <p>El que estem fent ac\u00ed, en realitat, \u00e9s moure el punter <code>HEAD</code> de la branca <code>main</code> al commit de la branca <code>nova-branca</code>. Aix\u00f2 \u00e9s el que ens permet integrar els canvis de la nova branca a la branca principal.</p> <p>Este tipus de merge s'anomena \"fast-forward merge\", i \u00e9s el m\u00e9s com\u00fa quan les dues branques no han divergit. \u00c9s la casu\u1e2fstica m\u00e9s senzilla i no genera conflictes, ja que no hi ha canvis en la branca <code>main</code> que puguin entrar en conflicte amb els canvis de la branca <code>nova-branca</code>.</p> <p></p>"},{"location":"part2/#fusionar-branques-divergents","title":"Fusionar branques divergents","text":"<p>Ara anem a complicar un poc les coses. Posem per cas que nosaltres estem fent canvis en la nostra branca <code>nova_branca</code>, anem a modificar l'arxiu README.md i afegir un nou par\u00e0graf. Ara, si fem un commit, tindrem un nou commit en la branca <code>nova_branca</code> que no est\u00e0 present en la branca <code>main</code>.</p> <pre><code>git commit -m \"Afegit un nou par\u00e0graf al README\"\n</code></pre> <p>Ara, canviem a la branca <code>main</code> i fem un canvi en el README.md, afegint un altre par\u00e0graf en el mateix lloc on hem afegit el par\u00e0graf anterior. Ara, si fem un commit, tindrem un nou commit en la branca <code>main</code> que no est\u00e0 present en la branca <code>nova_branca</code>.</p> <pre><code>git commit -m \"Afegit un nou par\u00e0graf al README en la branca main\"\n</code></pre> <p>Si analitzem el log, veurem que ara tenim dues branques que han divergit i tenen canvis en el mateix lloc. Esta volta anem a executar el log amb un par\u00e0metre m\u00e9s per veure la difer\u00e8ncia entre les dues branques:</p> <pre><code>git log --oneline --graph --decorate --all\n</code></pre> <p>I vorem que les nostres dues branques han divergit i seguixen camins diferents:</p> <pre><code>* 8e24c61 (HEAD -&gt; main) Afegit un nou par\u00e0graf al README en la branca main\n| * e28aafd (nova_branca) Afegit un nou par\u00e0graf al README\n|/  \n* 2e4ef06 Canvis en la nova branca\n* 8a72d0a m\u00e9s canvis al README\n* 8267bc4 nous canvis al README\n* 2d094c9 canvis al README\n* a7a541a Afegit README.md\n</code></pre> <p>Si analitzem el log i el tranformem en diagrama tindriem algo aix\u00ed:</p> <p></p> <p>Ara tenim dues branques que han divergit i tenen canvis en el mateix lloc. Si intentem fusionar les dues branques, Git no sabr\u00e0 quin canvi escollir i ens donar\u00e0 un error de fusi\u00f3. Aix\u00f2 \u00e9s el que es coneix com a \"conflicte de fusi\u00f3\". Aix\u00f2 no ens ha d'espantar, si no que \u00e9s una part normal del treball amb Git. Els conflictes de fusi\u00f3 s\u00f3n comuns quan treballem en equip i diverses persones fan canvis en el mateix fitxer al mateix temps. Primer anem a fer el merge de les branques:</p> <pre><code>git merge nova-branca\n</code></pre> <p>Encara que ens marque el conflicte, Git ens permet resoldre els conflictes de fusi\u00f3 manualment. Quan fem un merge i hi ha un conflicte, Git marcar\u00e0 els fitxers afectats amb un missatge d'error i ens indicar\u00e0 quins fitxers tenen conflictes. Podem obrir els fitxers afectats i veure les l\u00ednies en conflicte, que estaran marcades amb <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code> i <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>.</p> <p>Aix\u00f2 ens permetr\u00e0 veure quins canvis hi ha en cada branca i decidir quins canvis volem conservar. Un cop haguem resolt els conflictes, podem afegir els fitxers afectats a l'staging area i fer un commit per completar la fusi\u00f3.</p> <pre><code>git commit -am \"Fusi\u00f3 de nova-branca a main\"\n</code></pre> <p>Anem a analitzar com queda tot plegat un cop hem fusionat les dues branques divergents. Tornem a fer un git log amb tots els par\u00e0metres anteriors i veurem que ara tenim un commit nou que representa la fusi\u00f3 de les dues branques:</p> <pre><code>*   b8f513e (HEAD -&gt; main) Fusi\u00f3 de nova_branca en main\n|\\  \n| * e28aafd (nova_branca) Afegit un nou par\u00e0graf al README\n* | 8e24c61 Afegit un nou par\u00e0graf al README en la branca main\n|/  \n* 2e4ef06 Canvis en la nova branca\n* 8a72d0a m\u00e9s canvis al README\n* 8267bc4 nous canvis al README\n* 2d094c9 canvis al README\n* a7a541a Afegit README.md\n</code></pre> <p>I si analitzem el diagrama, tindrem algo semblant al seg\u00fcent:</p> <p></p> <p>Un cop an fusionades les dues branques, podem eliminar la branca <code>nova_branca</code> si ja no la necessitem. Per fer-ho, podem utilitzar la comanda seg\u00fcent:</p> <pre><code>git branch -d nova_branca\n</code></pre>"},{"location":"part3/","title":"Part 3: Repositoris remots","text":"<p>Una vegada ja hem vist els aspecte b\u00e0sics dels repositoris locals, anem a explorar una de les funcions m\u00e9s interessants de Git, el seu aspecte col\u00b7laboratiu. Els repositoris remots ens permeten compartir el nostre codi amb altres persones i col\u00b7laborar en projectes de manera eficient. En aquesta secci\u00f3, veurem com treballar amb repositoris remots, com afegir-los al nostre projecte local i com pujar els nostres canvis.</p>"},{"location":"part3/#que-es-un-repositori-remot","title":"Qu\u00e8 \u00e9s un repositori remot?","text":"<p>Un repositori remot \u00e9s una versi\u00f3 del nostre projecte que es troba allotjada en un servidor extern. Aix\u00f2 ens permet compartir el nostre codi amb altres persones i col\u00b7laborar en projectes de manera eficient. Els repositoris remots s\u00f3n essencials per a la col\u00b7laboraci\u00f3 en equip i per a la gesti\u00f3 de projectes de codi obert.</p>"},{"location":"part3/#que-es-github","title":"Qu\u00e8 \u00e9s GitHub?","text":"<p>GitHub \u00e9s una plataforma de desenvolupament que utilitza Git com a sistema de control de versions. Permet als usuaris allotjar els seus repositoris remots, col\u00b7laborar amb altres persones i gestionar projectes de codi obert. GitHub ofereix una interf\u00edcie web per gestionar els repositoris, aix\u00ed com eines per a la revisi\u00f3 de codi, seguiment d'errors i gesti\u00f3 de projectes. GitHub \u00e9s una de les plataformes m\u00e9s populars per allotjar repositoris remots i \u00e9s \u00e0mpliament utilitzada per desenvolupadors de tot el m\u00f3n.</p>"},{"location":"part3/#creacio-dun-repositori-remot","title":"Creaci\u00f3 d'un repositori remot","text":"<p>Per crear un repositori remot a GitHub, segueix aquests passos:</p> <ol> <li>Inicia sessi\u00f3 al teu compte de GitHub.</li> <li>Fes clic al bot\u00f3 \"New\" (Nou) a la p\u00e0gina principal.</li> <li>Omple el formulari amb el nom del repositori, la descripci\u00f3 i la visibilitat (p\u00fablic o privat).</li> <li>Fes clic al bot\u00f3 \"Create repository\" (Crear repositori).</li> <li>Ara tens un repositori remot buit a GitHub.</li> </ol>"},{"location":"part3/#afegir-un-repositori-remot","title":"Afegir un repositori remot","text":"<p>Fins ara teniem el nostre repositori local deslligat de qualsevol repositori remot. Aix\u00f2, tot i ser \u00fatil, no explota totes les funcionalitats de Git. Ara veurem com afegir un repositori remot al nostre projecte local.</p> <p>Per afegir un repositori remot, utilitzarem la comanda <code>git remote add</code>. Aquesta comanda ens permet afegir un repositori remot al nostre projecte local. La sintaxi \u00e9s la seg\u00fcent:</p> <pre><code>git remote add &lt;nom_remot&gt; &lt;url_remot&gt;\n</code></pre> <p>Per conveni s'utilitza el nom <code>origin</code> per referir-se al repositori remot principal.</p> <p></p> <p>De moment, com podem vore al diagrama, el repositori remot \u00e9s un repositori buit. Per tant, no hi ha cap fitxer al repositori remot. El nostre repositori local cont\u00e9 els fitxers i el repositori remot no cont\u00e9 res. Ara veurem com pujar els nostres fitxers al repositori remot.</p>"},{"location":"part3/#pujar-fitxers-al-repositori-remot","title":"Pujar fitxers al repositori remot","text":"<p>Per pujar els nostres fitxers al repositori remot, utilitzarem la comanda <code>git push</code>. Aquesta comanda ens permet pujar els nostres canvis al repositori remot. La sintaxi \u00e9s la seg\u00fcent:</p> <pre><code>git push &lt;nom_remot&gt; &lt;nom_branque&gt;\n</code></pre> <p>Per exemple, si volem pujar els nostres canvis a la branca <code>main</code> del repositori remot <code>origin</code>, utilitzarem la seg\u00fcent comanda:</p> <pre><code>git push origin main\n</code></pre> <p></p> <p>Ara, si anem al nostre repositori remot a GitHub, veurem que els nostres fitxers s'han pujat correctament. Per\u00f2 no nom\u00e9s es pugen fitxers al repositori remot, sin\u00f3 que tamb\u00e9 es puja la hist\u00f2ria de commits. Aix\u00f2 vol dir que podem veure tots els canvis que hem fet al nostre projecte i qui els ha fet. Aix\u00f2 \u00e9s molt \u00fatil per a la col\u00b7laboraci\u00f3 en equip i per a la gesti\u00f3 de projectes de codi obert.</p>"},{"location":"part3/#descarregar-canvis-del-repositori-remot","title":"Descarregar canvis del repositori remot","text":"<p>Per descarregar canvis del repositori remot, utilitzarem la comanda <code>git pull</code>. Aquesta comanda ens permet descarregar els canvis del repositori remot i fusionar-los amb el nostre repositori local. La sintaxi \u00e9s la seg\u00fcent:</p> <pre><code>git pull &lt;nom_remot&gt; &lt;nom_branque&gt;\n</code></pre> <p>Per exemple, si volem descarregar els canvis de la branca <code>main</code> del repositori remot <code>origin</code>, utilitzarem la seg\u00fcent comanda:</p> <pre><code>git pull origin main\n</code></pre> <p>Aix\u00f2 far\u00e0 el contrari del que feia la comanda git push, agarrar\u00e0 la informaci\u00f3 que hi ha al repositori remot anomenat origin i la fusionara amb la branca main del nostre repositori local.</p>"},{"location":"part3/#connexio-per-terminal-a-github","title":"Connexi\u00f3 per terminal a GitHub","text":"<p>\u00c9s recomanable que vos configureu un certificat SSH per a poder connectar-vos a GitHub des de la terminal. Aix\u00f2 us permetr\u00e0 pujar i descarregar fitxers del repositori remot sense haver d'introduir el vostre nom d'usuari i contrasenya cada vegada. Per configurar el certificat SSH, consulteu la documentaci\u00f3 oficial de GitHub: Connecting to GitHub with SSH.</p>"},{"location":"part4/","title":"Part 4: Col\u00b7laboraci\u00f3 amb GitHub","text":""},{"location":"part4/#collaborar-amb-repositoris-dels-altres","title":"Col\u00b7laborar amb repositoris dels altres","text":"<p>No sempre serem propietaris d'un repositori del que volem participar. Github, en estos casos, ens proporciona eines per a poder col\u00b7laborar amb repositoris d'altres persones. En este apartat veurem com fer-ho.</p>"},{"location":"part4/#fork","title":"Fork","text":"<p>Un fork \u00e9s una c\u00f2pia d'un repositori que es crea a la nostra compte de GitHub. Aix\u00f2 ens permet fer canvis al repositori sense afectar el repositori original. Per crear un fork, nom\u00e9s hem de fer clic al bot\u00f3 \"Fork\" a la part superior dreta del repositori que volem copiar. Aix\u00f2 crear\u00e0 una c\u00f2pia del repositori al nostre compte de GitHub.</p> <p>Anem a posar per cas que voleu col\u00b7laborar amb este repositori, per\u00f2 que trobeu una errata o un error. En este cas, el primer que haureu de fer \u00e9s crear un fork del repositori.</p> <p>Link al repositori d'este projecte</p> <p>Accediu al repositori i feu clic al bot\u00f3 \"Fork\" a la part superior dreta. Aix\u00f2 crear\u00e0 una c\u00f2pia del repositori al vostre compte de GitHub.</p> <p>No canvies el nom del repositori, simplement forkeja'l en el teu compte de Github.</p>"},{"location":"part4/#clonar-un-repositori-de-github","title":"Clonar un repositori de GitHub","text":"<p>Abans hem vist com vincular un repositori remot a un repositori local. Ara veurem com clonar un repositori remot. Clonar un repositori remot \u00e9s similar a crear un fork, per\u00f2 en lloc de crear una c\u00f2pia del repositori al nostre compte de GitHub, creem una c\u00f2pia del repositori al nostre ordinador.</p> <p>En realitat, el que est\u00e0 passant quan clonem un repositori \u00e9s que estem creant una c\u00f2pia del repositori remot al nostre ordinador. Aix\u00f2 ens permet treballar amb el repositori localment i fer canvis sense afectar el repositori remot. Tingueu en compte que no nom\u00e9s es copien els fitxers, sin\u00f3 que tamb\u00e9 es copia tota la hist\u00f2ria de commits. Aix\u00f2 vol dir que podem veure tots els canvis que s'han fet al repositori i qui els ha fet. Aix\u00f2 \u00e9s molt \u00fatil per a la col\u00b7laboraci\u00f3 en equip i per a la gesti\u00f3 de projectes de codi obert.</p> <p>Per clonar un repositori remot, utilitzarem la comanda <code>git clone</code>. Aquesta comanda ens permet crear una c\u00f2pia del repositori remot al nostre ordinador. La sintaxi \u00e9s la seg\u00fcent:</p> <pre><code>git clone &lt;url_remot&gt;\n</code></pre> <p>Quan clonem un repositori remot ja tindrem el repositori vinculat al remot, aix\u00ed que no caldr\u00e0 fer <code>git remote add origin &lt;url_remot&gt;</code>. A continuaci\u00f3 cloneu el repositori que heu forkejat al vostre compte de GitHub. Per fer-ho, aneu a la p\u00e0gina del repositori i feu clic al bot\u00f3 \"Code\" i copieu l'URL que apareix. Despr\u00e9s, obriu una terminal i escriviu la comanda <code>git clone</code> seguida de l'URL que heu copiat.</p>"},{"location":"part4/#suggerir-canvis-a-un-repositori-remot","title":"Suggerir canvis a un repositori remot","text":"<p>Ara que ja teniu el repositori clonat al vostre ordinador, podeu fer canvis i suggerir-los al repositori original. Per fer-ho, heu de crear una branca nova, fer els canvis i despr\u00e9s fer un \"pull request\" al repositori original. Un \"pull request\" \u00e9s una sol\u00b7licitud per a que els propietaris del repositori original revisen els vostres canvis i els fusionen amb el seu repositori. Aix\u00f2 \u00e9s \u00fatil perqu\u00e8 permet als propietaris del repositori revisar els canvis abans d'acceptar-los i fusionar-los amb el seu repositori.</p> <p>Per crear un \"pull request\", primer heu de fer els canvis al vostre repositori local. Despr\u00e9s, heu de fer un commit dels canvis i pujar-los al vostre repositori remot. Finalment, heu de crear un \"pull request\" al repositori original.</p> <p>Per fer un \"pull request\", aneu a la p\u00e0gina del repositori original i feu clic al bot\u00f3 \"Pull requests\". Despr\u00e9s, feu clic al bot\u00f3 \"New pull request\". Aix\u00f2 us portar\u00e0 a una p\u00e0gina on podreu seleccionar la branca que heu creat i els canvis que heu fet. Despr\u00e9s, feu clic al bot\u00f3 \"Create pull request\" per enviar la vostra sol\u00b7licitud.</p> <p>\u00c9s important que el missatge del \"pull request\" sigui clar i conc\u00eds, i que expliqueu els canvis que heu fet i per qu\u00e8 els heu fet. Aix\u00f2 ajudar\u00e0 als propietaris del repositori a entendre els vostres canvis i a revisar-los m\u00e9s r\u00e0pidament.</p>"},{"location":"part4/#sincronitzacio-amb-el-repositori-original","title":"Sincronitzaci\u00f3 amb el repositori original","text":"<p>Si el repositori original ha canviat des que vau fer el vostre fork, \u00e9s possible que vulgueu sincronitzar el vostre fork amb el repositori original. Aix\u00f2 us permetr\u00e0 tenir la versi\u00f3 m\u00e9s actualitzada del repositori original al vostre fork.</p> <p>Per fer-ho, heu de seguir els seg\u00fcents passos:</p> <ol> <li>Afegir el repositori original com a remot al vostre fork. Per fer-ho, utilitzeu la comanda <code>git remote add upstream &lt;url_repositori_original&gt;</code>. Aix\u00f2 afegir\u00e0 el repositori original com a remot anomenat \"upstream\".</li> <li>Obtenir els canvis del repositori original. Per fer-ho, utilitzeu la comanda <code>git fetch upstream</code>. Aix\u00f2 descarregar\u00e0 els canvis del repositori original al vostre ordinador.</li> <li>Fusionar els canvis del repositori original amb el vostre fork. Per fer-ho, utilitzeu la comanda <code>git merge upstream/main</code>. Aix\u00f2 fusionar\u00e0 els canvis del repositori original amb la vostra branca actual.</li> <li>Pujar els canvis al vostre fork. Per fer-ho, utilitzeu la comanda <code>git push origin &lt;nom_branque&gt;</code>. Aix\u00f2 pujar\u00e0 els canvis al vostre fork a GitHub.</li> <li>Ara ja podeu fer un \"pull request\" al repositori original amb els canvis que heu fet.</li> </ol>"},{"location":"part5/","title":"Part 5: Desfer canvis","text":""},{"location":"part5/#context","title":"Context","text":"<p>A voltes, als projectes, ens adonem que hem com\u00e8s un error i volem desfer els canvis que hem fet. En este apartat veurem com fer-ho.</p>"},{"location":"part5/#desfer-canvis-en-fitxers","title":"Desfer canvis en fitxers","text":"<p>Si heu modificat un fitxer i voleu desfer els canvis, podeu utilitzar la comanda <code>git checkout</code>. Aquesta comanda us permetr\u00e0 desfer els canvis en un fitxer concret i tornar a la versi\u00f3 anterior. La sintaxi \u00e9s la seg\u00fcent:</p> <pre><code>git checkout &lt;nom_fitxer&gt;\n</code></pre> <p>Aix\u00f2 desfer\u00e0 els canvis en el fitxer especificat i tornar\u00e0 a la versi\u00f3 que tenia l'arxiu en l'\u00faltim commit.</p>"},{"location":"part5/#desfer-un-commit","title":"Desfer un commit","text":"<p>Si heu fet un commit i voleu desfer-lo, podeu utilitzar la comanda <code>git reset</code>. Aquesta comanda us permetr\u00e0 desfer un commit i tornar a l'estat anterior. La sintaxi \u00e9s la seg\u00fcent:</p> <pre><code>git reset &lt;hash_commit&gt;\n</code></pre> <p>Hi ha dues opcions del reset, <code>--soft</code> i <code>--hard</code>. La difer\u00e8ncia \u00e9s que <code>--soft</code> mant\u00e9 els canvis en l'\u00edndex, mentre que <code>--hard</code> els elimina completament. Si voleu desfer un commit i mantenir els canvis, utilitzeu <code>--soft</code>. Si voleu desfer un commit i eliminar els canvis, utilitzeu <code>--hard</code>.</p> <p>Tingueu en compte que <code>git reset</code> \u00e9s una comanda perillosa, ja que pot eliminar canvis que no es poden recuperar. Assegureu-vos de fer una c\u00f2pia de seguretat dels fitxers abans d'utilitzar-la.</p>"},{"location":"part5/#desfer-un-canvi-sense-desfer-lhistorial-de-commits","title":"Desfer un canvi sense desfer l'historial de commits","text":"<p>Si voleu desfer un canvi en un fitxer sense desfer l'historial de commits, podeu utilitzar la comanda <code>git revert</code>. Aquesta comanda crea un nou commit que desf\u00e0 els canvis del commit especificat. La sintaxi \u00e9s la seg\u00fcent:</p> <pre><code>git revert &lt;hash_commit&gt;\n</code></pre> <p>El que fa <code>git revert</code> \u00e9s crear un nou commit que desf\u00e0 els canvis del commit especificat. Aix\u00f2 \u00e9s \u00fatil si voleu desfer un canvi sense eliminar l'historial de commits. A m\u00e9s, <code>git revert</code> \u00e9s una comanda segura, ja que no elimina cap canvi i mant\u00e9 l'historial de commits intacte.</p>"},{"location":"part6/","title":"Part 6: Modificar l'historial de commits","text":""},{"location":"part6/#context","title":"Context","text":"<p>Quan ja tingueu certa soltura amb Git voldreu que el vostre historial de commits estiga el m\u00e9s net i clar possible, com hem vist en totes les parts anteriors, quan comenceu a toquetejar, fer branques, pull requests, merges i dem\u00e9s, l'arbre de commits comen\u00e7a a complicar-se. Per este tipus de situacions comptem amb algunes comandes que ens permeten arreglar un poc l'historial de commits. Anem a vore qu\u00e8 podem fer amb elles.</p>"},{"location":"part6/#evitar-un-merge-amb-conflictes","title":"Evitar un merge amb conflictes","text":"<p>Quan fem un merge entre dues branques, si hi ha canvis en els mateixos arxius, Git no sabr\u00e0 quin canvi aplicar i ens demanar\u00e0 que decidim quina versi\u00f3 volem conservar. Si volem evitar aix\u00f2, podem fer un rebase de la branca que volem fusionar amb la branca principal. Aix\u00f2 far\u00e0 que els commits de la branca que volem fusionar es reescriguen sobre la branca principal, evitant aix\u00ed els conflictes.</p> <p></p> <p>Per fer un rebase, primer hem de situar-nos a la branca que volem fusionar i despr\u00e9s executar la comanda <code>git rebase &lt;branca_principal&gt;</code>. Per exemple, si volem fusionar la branca <code>feature</code> amb la branca <code>main</code>, hem de fer el seg\u00fcent:</p> <pre><code>git rebase main\n</code></pre> <p>Aix\u00f2 far\u00e0 que els commits de la branca <code>feature</code> es reescriguen sobre la branca <code>main</code>, evitant aix\u00ed els conflictes. Si hi ha conflictes, Git ens demanar\u00e0 que els resolguem manualment. Un cop resolts, hem de fer un commit per guardar els canvis i continuar amb el rebase.</p> <p>Per continuar amb el rebase, hem de fer la comanda seg\u00fcent:</p> <pre><code>git rebase --continue\n</code></pre> <p>Aix\u00f2 far\u00e0 que Git continue amb el rebase i aplique els canvis restants. Si hi ha m\u00e9s conflictes, haurem de repetir el proc\u00e9s fins que tots els conflictes estiguen resolts.</p> <p></p>"},{"location":"part6/#juntar-commits","title":"Juntar commits","text":"<p>Hi ha voltes que els canvis que volem fer no s\u00f3n tan grans com per fer un commit per a cada canvi. En estos casos, podem agrupar diversos commits en un de sol. Per fer-ho, utilitzarem la comanda <code>git rebase -i HEAD~&lt;n&gt;</code>, on <code>&lt;n&gt;</code> \u00e9s el nombre de commits que volem agrupar. Per exemple, si volem agrupar els \u00faltims 3 commits, hem de fer el seg\u00fcent:</p> <pre><code>git rebase -i HEAD~3\n</code></pre> <p>Aix\u00f2 ens obrir\u00e0 un editor de text amb una llista dels \u00faltims 3 commits. La llista tindr\u00e0 un aspecte similar al seg\u00fcent:</p> <pre><code>pick a7a541a Afegit README.md\npick 1234567 Afegit fitxer1.txt\npick 89abcdef Afegit fitxer2.txt\n</code></pre> <p>En esta llista, cada l\u00ednia representa un commit. Per agrupar els commits, hem de canviar la paraula <code>pick</code> per <code>squash</code> (o <code>s</code>) en els commits que volem agrupar. Per exemple, si volem agrupar els dos \u00faltims commits en el primer, hem de fer el seg\u00fcent:</p> <pre><code>pick a7a541a Afegit README.md\nsquash 1234567 Afegit fitxer1.txt\nsquash 89abcdef Afegit fitxer2.txt\n</code></pre> <p>Aix\u00f2 far\u00e0 que els dos \u00faltims commits es fusionen en el primer. Un cop h\u00e0gem fet els canvis, hem de guardar i tancar l'editor de text. Git ens demanar\u00e0 que escriguem un nou missatge per al commit agrupat. Podem escriure un missatge nou o deixar el missatge dels commits originals. Un cop h\u00e0gem escrit el missatge, hem de guardar i tancar l'editor de text.</p> <p>Aix\u00f2 far\u00e0 que Git agrupe els commits i els reescriga en un sol commit. Si hi ha conflictes, Git ens demanar\u00e0 que els resolguem manualment. Un cop resolts, hem de fer un commit per guardar els canvis i continuar amb el rebase. Per continuar amb el rebase, hem de fer la comanda seg\u00fcent:</p> <pre><code>git rebase --continue\n</code></pre>"}]}